--테이블 2개 생성(제약 조건 포함)
CREATE TABLE PRODUCTS
(
PRODUCT_ID      CHAR(10),
PRODUCT_NAME    VARCHAR2(20),
PRICE           NUMBER(10),
CONSTRAINT PODUCTS_PK PRIMARY KEY (PRODUCT_ID)
);

CREATE TABLE PURCHASE
(
CUSTOMER_NAME   VARCHAR2(20),
PRODUCT_ID      CHAR(10),
AMOUNT          NUMBER(10),
CONSTRAINT PURCHASE_PK PRIMARY KEY (PRODUCT_ID)
);

COMMIT;

--데이터 각각 5개씩 삽입
INSERT INTO PRODUCTS VALUES('111','컴퓨터', 1500000);
INSERT INTO PRODUCTS VALUES('112','의자', 100000);
INSERT INTO PRODUCTS VALUES('113','책상', 150000);
INSERT INTO PRODUCTS VALUES('114','마이크', 300000);
INSERT INTO PRODUCTS VALUES('115','캠', 200000);

INSERT INTO PURCHASE VALUES('조남현','111', 1);
INSERT INTO PURCHASE VALUES('문성윤','112', 2);
INSERT INTO PURCHASE VALUES('어정호','121', 1);
INSERT INTO PURCHASE VALUES('김기연','114', 3);
INSERT INTO PURCHASE VALUES('최지원','115', 2);

SELECT * FROM PRODUCTS;
SELECT * FROM PURCHASE;


--속성 타입 수정, 데이터 값 변경, 속성 이름 변경, 제약조건 추가, savepoint 2개 포함

DESC PURCHASE;
ALTER TABLE PURCHASE MODIFY(PRODUCT_ID VARCHAR2(10));
DESC PURCHASE;
ALTER TABLE PURCHASE RENAME COLUMN CUSTOMER_NAME TO CUST_NAME;
ALTER TABLE PURCHASE DROP PRIMARY KEY;
ALTER TABLE PURCHASE ADD CONSTRAINT PURCHASE_PK2 PRIMARY KEY (CUST_NAME);
SAVEPOINT sv1;
UPDATE PURCHASE SET CUST_NAME='갓지원' WHERE CUST_NAME='최지원';
SAVEPOINT sv2;
UPDATE PURCHASE SET CUST_NAME='쬬교' WHERE CUST_NAME='조남현';


--savepoint 1번으로 rollback후 동일작업 수행

ROLLBACK TO sv1;
UPDATE PURCHASE SET CUST_NAME='갓지원' WHERE CUST_NAME='최지원';
SAVEPOINT sv2;
UPDATE PURCHASE SET CUST_NAME='쬬교' WHERE CUST_NAME='조남현';

--savepoint 2번으로 rollback후 동일작업 수행

ROLLBACK TO sv2;
UPDATE PURCHASE SET CUST_NAME='쬬교' WHERE CUST_NAME='조남현';

--작업내용을 확정

COMMIT;

--2개 테이블 Join (inner join, left outer join, right outer join, full outer join)을 수행

SELECT * FROM PRODUCTS;
SELECT * FROM PURCHASE;

SELECT CUST_NAME, PURCHASE.PRODUCT_ID, PRODUCT_NAME, PRICE, AMOUNT FROM PURCHASE INNER JOIN PRODUCTS ON PURCHASE.PRODUCT_ID = PRODUCTS.PRODUCT_ID;
SELECT CUST_NAME, PURCHASE.PRODUCT_ID, PRODUCT_NAME, PRICE, AMOUNT FROM PURCHASE LEFT OUTER JOIN PRODUCTS ON PURCHASE.PRODUCT_ID = PRODUCTS.PRODUCT_ID;
SELECT CUST_NAME, PURCHASE.PRODUCT_ID, PRODUCT_NAME, PRICE, AMOUNT FROM PURCHASE RIGHT OUTER JOIN PRODUCTS ON PURCHASE.PRODUCT_ID = PRODUCTS.PRODUCT_ID;
SELECT CUST_NAME, PURCHASE.PRODUCT_ID, PRODUCT_NAME, PRICE, AMOUNT FROM PURCHASE FULL OUTER JOIN PRODUCTS ON PURCHASE.PRODUCT_ID = PRODUCTS.PRODUCT_ID;

--2개 테이블에 대하여 각 조건별로 결과물을 조회하고 그 결과물에 대하여 합집합(중복포함 및 미포함), 교집함, 차집함을 출력하세요.
CREATE TABLE PURCHASE2 AS SELECT * FROM PURCHASE;
INSERT INTO PURCHASE2 VALUES('조남현','222', 3);

SELECT * FROM PURCHASE2;
SELECT * FROM PURCHASE;

SELECT * FROM PURCHASE2 UNION ALL SELECT * FROM PURCHASE;
SELECT * FROM PURCHASE2 UNION SELECT * FROM PURCHASE;
SELECT * FROM PURCHASE2 INTERSECT SELECT * FROM PURCHASE;
SELECT * FROM PURCHASE2 MINUS SELECT * FROM PURCHASE;

DROP TABLE PURCHASE;
DROP TABLE PURCHASE2;
DROP TABLE PRODUCTS;

--[과제] EMPLOYEES 테이블에서 escape 옵션을 사용하여 아래와 같이 출력되는 SQL문을 작성하세요.
--job_id 칼럼에서  _을 와일드키가 아닌 문자로 취급하여 '_A'를 포함하는  모든 행을 출력
SELECT * FROM employees WHERE job_id like '%\_A%' escape '\';
--[과제] employees 테이블에서 이름에 FIRST_NAME에 LAST_NAME을 붙여서 'NAME' 컬럼명으로 출력하세요.
--예) Steven King 
SELECT employee_id, first_name ||' '|| last_name name FROM employees;
SELECT CONCAT(CONCAT(first_name,' '),last_name) name FROM employees;
--[과제] Seo라는 사람의 부서명을 출력하세요.
select last_name, department_name from employees e,
departments d where d.department_id(+) = e.department_id and last_name = 'Seo';
--[과제] 테이블들을 분석해서 전체 현황을 설명할 수 있는 요약 테이블을 3개 작성하세요.
--예) 부서별 SALARY 순위
